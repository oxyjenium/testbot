import os

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext


import keyboards.user as user_keyboards

from states import UserApplications
from keyboards.user import TECHS
from db.requests import add_application, get_last_application_by_user, get_user


router = Router()


user_choices = {}


@router.message(F.text == 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
async def leave_request(message: Message, state: FSMContext):
    await message.answer(
        text='<strong>–•–æ—Ä–æ—à–æ!</strong> –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —Ç–æ–≥–æ, –∫–∞–∫—É—é —É—Å–ª—É–≥—É —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å? üõ†Ô∏è\n<i>–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:</i>',
        reply_markup=await user_keyboards.application_services(),
        parse_mode='HTML'
    )
    await state.set_state(UserApplications.service)


@router.message(UserApplications.service)
async def get_service(message: Message, state: FSMContext):
    service = message.text.strip()

    if service == '–ù–∞–∑–∞–¥':
        await message.answer(
            text='<strong>‚úÖ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</strong>',
            reply_markup=await user_keyboards.main_menu(),
            parse_mode='HTML'
        )
        await state.clear()
        return

    if service not in ['–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞', '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è']:
        await message.answer(
            text='‚ùå <strong>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</strong>',
            parse_mode='HTML'
        )
        return

    await state.update_data(service=service)
    await message.answer(
        text='<strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ —Å–≤–æ—é –∑–∞—è–≤–∫—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ. üìù\n<i>–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å.</i>\n<i>–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–µ–µ.</i>',
        reply_markup=await user_keyboards.miss(),
        parse_mode='HTML'
    )
    await state.set_state(UserApplications.description)


@router.message(UserApplications.description)
async def get_description(message: Message, state: FSMContext):
    description = message.text.strip() if message.text else message.caption if message.caption else None
    file_id = message.photo[-1].file_id if message.photo else None

    if description == '–ù–∞–∑–∞–¥':
        await message.answer(
            text='<strong>‚úÖ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</strong>',
            reply_markup=await user_keyboards.main_menu(),
            parse_mode='HTML'
        )
        await state.clear()
        return
    
    if not description and not file_id:
        await message.answer(
            text='‚ùå <strong>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ—é –∑–∞—è–≤–∫—É</strong>',
            parse_mode='HTML'
        )
        return

    description = '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è' if description == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else description
    await state.update_data(description=description, file_id=file_id)

    user_choices[message.from_user.id] = {tech: False for tech in TECHS}
    await message.answer(
        text='<strong>–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–≤–æ—ë–º –ø—Ä–æ–µ–∫—Ç–µ. üåê</strong>',
        reply_markup=await user_keyboards.build_tech_keyboard(message.from_user.id, user_choices),
        parse_mode='HTML'
    )
    await state.set_state(UserApplications.technologies)


@router.callback_query(UserApplications.technologies, F.data.startswith("toggle:"))
async def toggle_technology(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    tech = callback.data.split(":")[1]
    user_choices[user_id][tech] = not user_choices[user_id][tech]

    await callback.message.edit_reply_markup(
        reply_markup=await user_keyboards.build_tech_keyboard(user_id, user_choices)
    )
    await callback.answer()


@router.callback_query(UserApplications.technologies, F.data == "confirm")
async def confirm_technologies(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    chosen = [tech for tech, selected in user_choices[user_id].items() if selected]

    if not chosen:
        await callback.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç", show_alert=True)
        return

    await state.update_data(technologies=chosen)
    await callback.message.delete()
    await callback.message.answer(
        text='<strong>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏. üìÖ</strong>',
        reply_markup=await user_keyboards.chose_deadline(),
        parse_mode='HTML'
    )
    await state.set_state(UserApplications.deadline)
    
    
@router.message(UserApplications.deadline)
async def get_deadline(message: Message, state: FSMContext):
    deadline = message.text.strip()
    
    if deadline == '–ù–∞–∑–∞–¥':
        await message.answer(
            text='<strong>‚úÖ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</strong>',
            reply_markup=await user_keyboards.main_menu(),
            parse_mode='HTML'
        )
        await state.clear()
        return
    
    if deadline not in ['–î–æ 1 –Ω–µ–¥–µ–ª–∏', '1-2 –Ω–µ–¥–µ–ª–∏', '–ë–æ–ª–µ–µ –º–µ—Å—è—Ü–∞']:
        await message.answer(
            text='‚ùå <strong>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ä–æ–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</strong>',
            parse_mode='HTML'
        )
        return

    await state.update_data(deadline=deadline)

    data = await state.get_data()
    service = data.get('service')
    description = data.get('description')
    technologies = data.get('technologies')
    file_id = data.get('file_id')

    if file_id:
        await message.answer_photo(
            photo=file_id,
            caption=f'<strong>–£—Å–ª—É–≥–∞:</strong> {service}\n'
             f'<strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {description}\n'
             f'<strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong> {", ".join(technologies)}\n'
             f'<strong>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {deadline}',
            reply_markup=await user_keyboards.confirmation(),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            text=f'<strong>–£—Å–ª—É–≥–∞:</strong> {service}\n'
             f'<strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {description}\n'
             f'<strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong> {", ".join(technologies)}\n'
             f'<strong>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {deadline}',
            reply_markup=await user_keyboards.confirmation(),
            parse_mode='HTML'
        )

    await state.set_state(None)
    
    
@router.callback_query(F.data == "confirm_application")
async def confirm_application(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    
    data = await state.get_data()
    service = data.get('service')
    description = data.get('description')
    technologies = data.get('technologies')
    deadline = data.get('deadline')
    file_id = data.get('file_id')
    user_id = callback.from_user.id

    await add_application(
        user_id=user_id,
        service=service,
        description=description,
        technologies=technologies,
        deadline=deadline,
        screenshot=file_id
    )
    
    application = await get_last_application_by_user(user_id)
    user = await get_user(user_id)
    
    text = f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{application.get('id')}\nüë§ –ö–ª–∏–µ–Ω—Ç: {user.get('full_name')}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('number')}\nüõ† –£—Å–ª—É–≥–∞: {application.get('service')}\nüíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {application.get('technologies')}\nüìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {application.get('deadline')}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {application.get('description')}"
    
    if file_id:
        await callback.bot.send_photo(
            chat_id=int(os.getenv("CHAT_ID")),
            photo=file_id,
            caption=text,
            reply_markup=await user_keyboards.link(user.get('username')),
            parse_mode='HTML'
        )
    else:
        await callback.bot.send_message(
            chat_id=int(os.getenv("CHAT_ID")),
            text=text,
            reply_markup=await user_keyboards.link(user.get('username')),
            parse_mode='HTML'
        )

    await callback.message.answer(
        text='‚úÖ <strong>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</strong>\n'
             '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
        reply_markup=await user_keyboards.main_menu(),
        parse_mode='HTML'
    )
    
    await state.clear()
    
    
@router.callback_query(F.data == "cancel_application")
async def cancel_application(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    await callback.message.answer(
        text='‚ùå <strong>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.</strong>',
        reply_markup=await user_keyboards.main_menu(),
        parse_mode='HTML'
    )
    
    await state.clear()