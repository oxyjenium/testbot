import re
import asyncpg

from datetime import datetime

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

import keyboards.user as user_keyboards

from db.crud import create_user, update_user_details, check_user_fields
from states import UserRegistration


router = Router()


DATE_PATTERN = re.compile(r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(19|20)\d\d$")


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    try:
        await create_user(
            tg_id=message.from_user.id,
            username=message.from_user.username
        )
    except asyncpg.exceptions.UniqueViolationError:
        if await check_user_fields(tg_id=message.from_user.id):
            await message.answer(
                text='üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.',
                reply_markup=user_keyboards.main_menu(),
                parse_mode='HTML'
            )
            return
        else:
            pass
        
        
    await message.answer(
        text='–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ <strong>—Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç</strong>, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ—ë <strong>–§–ò–û</strong> üìù',
        parse_mode='HTML'
    )
    await state.set_state(UserRegistration.full_name)
    

@router.message(UserRegistration.full_name)
async def get_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    
    if len(full_name.split()) != 3:
        await message.answer(
            text='‚úçÔ∏è <strong>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –ø–æ–ª–Ω–æ–µ –∏–º—è</strong>\n(–§–∞–º–∏–ª–∏—è, –ò–º—è –∏ –û—Ç—á–µ—Å—Ç–≤–æ) üìù',
            parse_mode='HTML'
        )
        return

    await state.update_data(full_name=full_name)
    await message.answer(
        text='üéÇ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong>\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ <strong>—Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è</strong> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <strong>–î–î.–ú–ú.–ì–ì–ì–ì</strong> üìÖ',
        parse_mode='HTML'
    )
    await state.set_state(UserRegistration.date_birth)
    

@router.message(UserRegistration.date_birth)
async def get_date_birth(message: Message, state: FSMContext):
    date_birth = message.text.strip()

    if not DATE_PATTERN.match(date_birth):
        await message.answer(
            text='‚ùå <strong>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</strong>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <strong>–î–î.–ú–ú.–ì–ì–ì–ì</strong> üìÖ\n–ü—Ä–∏–º–µ—Ä: <strong>03.10.2000</strong> ‚úÖ',
            parse_mode='HTML'
        )
        return
    
    user_date = datetime.strptime(date_birth, "%d.%m.%Y")
    now_date = datetime.now()

    if user_date > now_date:
        await message.answer(
            text='‚ùå <strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!</strong>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <strong>–î–î.–ú–ú.–ì–ì–ì–ì</strong> üìÖ',
            parse_mode='HTML'
        )
        return

    await state.update_data(date_birth=date_birth)
    
    await message.answer(
        text='üì≤ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong>\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <strong>–ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º</strong>, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è.',
        reply_markup=user_keyboards.share_contact(),
        parse_mode='HTML'
    )
    await state.set_state(UserRegistration.number)
    

@router.message(UserRegistration.number, F.contact)
async def get_contact(message: Message, state: FSMContext):
    contact = message.contact

    if not contact or not contact.phone_number:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º")
        return

    data = await state.get_data()
    full_name = data.get('full_name')
    date_birth = data.get('date_birth')

    await update_user_details(
        tg_id=message.from_user.id,
        full_name=full_name,
        date_birth=datetime.strptime(date_birth, "%d.%m.%Y").date(),
        number=contact.phone_number
    )

    await message.answer(
        text=f'‚úÖ <strong>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</strong>\nüë§ <strong>–§–ò–û:</strong> {full_name}\nüéÇ <strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> {date_birth}\nüìû <strong>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</strong> {contact.phone_number}\nüôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!',
        reply_markup=user_keyboards.main_menu(),
        parse_mode='HTML'
    )
    await state.clear()
 